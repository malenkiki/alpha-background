#!/usr/bin/env php
<?php
/*
Copyright (c) 2013 Michel Petit <petit.michel@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/



namespace Malenki;


(@include_once __DIR__ . '/vendor/autoload.php') || @include_once __DIR__ . '/../../autoload.php';


$opt = Argile\Options::getInstance();


$opt->description('Alpha background are difficult with IE6, IE7 and IE8… So this is one of the solutions using PHP. This script can generate a small PNG image (1px×1px) to have background with alpha transparency, for IE7 and IE8.
If you have some scruples to use an image for IE, I provide some features into my class to generate good line of CSS hacked for this browsers of stone’s age.');
// Bug #14 of Argile
//$opt->version('Version 1.0 by Michel Petit <petit.michel@gmail.com>.');

$opt->flexible();

$opt->newValue('red')
    ->required()
    ->short('r')
    ->long('red')
    ->help('Red value, between 0 and 255', 'INTEGER')
    ;

$opt->newValue('green')
    ->required()
    ->short('g')
    ->long('green')
    ->help('Green value, between 0 and 255', 'INTEGER')
    ;

$opt->newValue('blue')
    ->required()
    ->short('b')
    ->long('blue')
    ->help('Blue value, between 0 and 255', 'INTEGER')
    ;

$opt->newValue('alpha')
    ->required()
    ->short('a')
    ->long('alpha')
    ->help('Alpha value, between 0 (full transparency) and 1 (full opacity). By default alpha=1', 'FLOAT')
    ;

$opt->newValue('hex')
    ->required()
    ->short('x')
    ->long('hex')
    ->help('RGB(A) string, if alpha not given by this option or by --alpha, then alpha will be 1, full opacity.', 'STRING')
    ;

$opt->newValue('output')
    ->required()
    ->short('o')
    ->long('output')
    ->help('Output file name to save the PNG image.', 'FILE')
    ;

$opt->newSwitch('css')
    ->short('c')
    ->long('css')
    ->help('Dump CSS code to copy and paste into CSS file for good display of background with alpha tranparency in IE6, IE7, and IE8.');

$opt->parse();


$rgba = new AlphaBackground();

try
{
    if($opt->has('red'))
    {
        $rgba->red((int) $opt->get('red'));
    }

    if($opt->has('green'))
    {
        $rgba->green((int) $opt->get('green'));
    }

    if($opt->has('blue'))
    {
        $rgba->blue((int) $opt->get('blue'));
    }

    if($opt->has('alpha'))
    {
        $rgba->alpha((float) $opt->get('alpha'));
    }

    if($opt->has('hex'))
    {
        $rgba->hex((string) $opt->get('hex'));
    }
}
catch(\Exception $e)
{
    print($e->getMessage());
    print("\n");
    exit(1);
}

if($opt->has('output'))
{
    try
    {
        $rgba->save($opt->get('output'));
    }
    catch(\Exception $e)
    {
        print($e->getMessage());
        print("\n");
        exit(1);
    }
}
else
{
    if($opt->has('css'))
    {
        print($rgba->css());
        print("\n");
    }
    else
    {
        print('You must provide at least a filename to create image!');
        print("\n");
        exit(1);
    }
}

exit();

